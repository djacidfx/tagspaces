/**
 * TagSpaces - universal file and folder organizer
 * Copyright (C) 2024-present TagSpaces GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License (version 3) as
 * published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 */

import AppConfig from '-/AppConfig';
import TsButton, { TSButtonProps } from '-/components/TsButton';
import { AIProvider } from '-/components/chat/ChatTypes';
import { TabNames } from '-/hooks/EntryPropsTabsContextProvider';
import { useChatContext } from '-/hooks/useChatContext';
import {
  actions as SettingsActions,
  getTagColor,
  getTagTextColor,
} from '-/reducers/settings';
import { useNotificationContext } from '-/hooks/useNotificationContext';
import { useOpenedEntryContext } from '-/hooks/useOpenedEntryContext';
import { useTaggingActionsContext } from '-/hooks/useTaggingActionsContext';
import { getDefaultAIProvider } from '-/reducers/settings';
import { TS } from '-/tagspaces.namespace';
import { ButtonPropsVariantOverrides } from '@mui/material/Button';
import { OverridableStringUnion } from '@mui/types';
import { extractFileExtension } from '@tagspaces/tagspaces-common/paths';
import { useState } from 'react';
import { useTranslation } from 'react-i18next';
import { useDispatch, useSelector } from 'react-redux';
import { AIIcon } from '../CommonIcons';
import { AppDispatch } from '-/reducers/app';
import { getTagColors } from '-/services/taglibrary-utils';

type Props = TSButtonProps & {
  variant?: OverridableStringUnion<
    'text' | 'outlined' | 'contained',
    ButtonPropsVariantOverrides
  >;
  entries?: TS.FileSystemEntry[];
  fromDescription?: boolean;
  generationCompleted?: () => void;
  disabled?: boolean;
};

function AiGenTagsButton(props: Props) {
  const {
    fromDescription,
    variant,
    style,
    disabled,
    entries,
    generationCompleted,
  } = props;
  const { t } = useTranslation();
  const dispatch: AppDispatch = useDispatch();
  const { openedEntry } = useOpenedEntryContext();
  const defaultAiProvider: AIProvider = useSelector(getDefaultAIProvider);
  const defaultBackgroundColor = useSelector(getTagColor);
  const defaultTextColor = useSelector(getTagTextColor);
  const { generate, newChatMessage, getEntryModel } = useChatContext();
  const { addTagsToFsEntry } = useTaggingActionsContext();
  const { showNotification } = useNotificationContext();

  const [isLoading, setIsLoading] = useState<boolean>(false);

  let generateEntries: TS.FileSystemEntry[] = entries;
  if (!generateEntries && openedEntry) {
    generateEntries = [openedEntry];
  }

  const extensionSupported = generateEntries.every((entry) =>
    [
      ...AppConfig.aiSupportedFiletypes.text,
      ...AppConfig.aiSupportedFiletypes.image,
    ].includes(entry.extension),
  );

  if (!generateEntries || !defaultAiProvider || !extensionSupported) {
    return null;
  }

  const handleGeneration = () => {
    const promises = generateEntries.map((entry) => {
      const entryModel = getEntryModel(entry.name, defaultAiProvider);
      const ext = extractFileExtension(entry.name).toLowerCase();
      setIsLoading(true);
      if (fromDescription && entry.meta.description) {
        return newChatMessage(
          entry.meta.description,
          false,
          'user',
          'tags',
          defaultAiProvider.defaultTextModel,
          false,
          [],
          false,
        ).then((results) => handleGenerationResults(entry, results));
      } else if (AppConfig.aiSupportedFiletypes.image.includes(ext)) {
        return generate('image', 'tags', entryModel.name, entry).then(
          (results) => handleGenerationResults(entry, results),
        );
      } else if (AppConfig.aiSupportedFiletypes.text.includes(ext)) {
        return generate('text', 'tags', entryModel.name, entry).then(
          (results) => handleGenerationResults(entry, results),
        );
      }
      return Promise.resolve(false);
    });
    Promise.all(promises).then(() => {
      showNotification('Tags generated by an AI.');
      if (generationCompleted) {
        generationCompleted();
      }
    });
  };

  function handleGenerationResults(entry, response): Promise<boolean> {
    console.log('newOllamaMessage response:' + response);
    setIsLoading(false);
    if (response) {
      try {
        const tags: TS.Tag[] = response.map((tag) => {
          const tagTitle = tag.toLowerCase().split(' ')[0];
          return {
            title: tagTitle,
            ...getTagColors(tagTitle, defaultTextColor, defaultBackgroundColor),
          };
        });
        const uniqueTags = tags.filter(
          (tag, index, self) =>
            index === self.findIndex((o) => o.title === tag.title),
        );
        /* const regex = /\{([^}]+)\}/g;
        const tags: TS.Tag[] = [...response.matchAll(regex)].map((match) => {
          const tagTitle = match[1].trim().replace(/^,|,$/g, '').toLowerCase();
          return {
            title: tagTitle,
            ...getTagColors(tagTitle, defaultTextColor, defaultBackgroundColor),
          };
        });*/
        return addTagsToFsEntry(entry, uniqueTags).then(() => {
          dispatch(
            SettingsActions.setEntryContainerTab(TabNames.propertiesTab),
          );
          return true;
        });
        // showNotification('Tags for ' + entry.name + ' generated by an AI.');
      } catch (e) {
        console.error('parse response ' + response, e);
      }
    }
    return Promise.resolve(false);
  }

  return (
    <TsButton
      loading={isLoading}
      disabled={isLoading || disabled}
      tooltip="Uses currently configured AI model to generate tags for this file"
      startIcon={<AIIcon />}
      style={style}
      data-tid="generateTagsAITID"
      onClick={handleGeneration}
      variant={variant}
    >
      {t(
        'core:' +
          (fromDescription ? 'generateTagsFromDescription' : 'generateTags'),
      )}
    </TsButton>
  );
}

export default AiGenTagsButton;
